@model UserFps.Models.UsersModel
@{
    ViewData["Title"] = "Login";
}
<script src="~/js/client.min.js"></script>
<div class="container-fluid ups-signin" style="padding-left: 30%; padding-right: 30%;">
    <div class="row">
        <div class="center-block col-lg-8 body-content" style="float:none;">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <strong>Sign in to <span class="hidden-400">continue</span> <span class="show-400"></span> </strong>
                </div>
                <div class="panel-body">
                    <section>
                        <form asp-action="Login">
                            <fieldset>
                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <div class="row">
                                    <div class="col-lg-12">

                                        @* Language *@
                                        <div class="form-group has-feedback has-success">
                                            <div class="input-group">
                                                <span class="input-group-addon">
                                                    <i class="fa fa-language"></i>
                                                </span>
                                                <select class="form-control" data-toggle="tooltip" id="select" style="cursor: default;" title="Select your language preference." disabled>
                                                    <option>English</option>
                                                </select>
                                                <span class="glyphicon form-control-feedback glyphicon-ok" id="splang" style="padding-right:10px;"></span>
                                            </div>
                                        </div>

                                        @* Username input *@
                                        <div class="form-group has-feedback" id="fgname">
                                            <label for="loginname">User ID</label>
                                            <div class="input-group">
                                                <span class="input-group-addon">
                                                    <i class="fa fa-user"></i>
                                                </span>
                                                <input asp-for="UserName" autofocus="" class="form-control" data-toggle="tooltip" placeholder="ABC1XYZ" title="Enter your User ID (Workstation&nbsp;ID)" />
                                                <span asp-validation-for="UserName" class="text-danger"></span>
                                                <span class="glyphicon form-control-feedback" id="spname"></span>
                                            </div>
                                            <div class="help-block collapse" id="msgname" role="alert">&nbsp;</div>
                                        </div>

                                        @* Password input *@
                                        <div class="form-group has-feedback" id="fgpass">
                                            <label for="password">Password</label>
                                            <div class="input-group">
                                                <span class="input-group-addon">
                                                    <i class="fa fa-key"></i>
                                                </span>
                                                <input asp-for="Password" class="form-control" data-toggle="tooltip" placeholder="Password" title="Enter your Password" />
                                                <span asp-validation-for="Password" class="text-danger"></span>
                                                <span class="glyphicon form-control-feedback" id="sppass"></span>
                                            </div>
                                            <div class="help-block collapse" id="msgpass" role="alert">&nbsp;</div>
                                        </div>

                                        @*DeviceId is generated by the client-js file*@
                                        <div class="form-group">
                                            <input type="hidden" asp-for="DeviceId" class="form-control" id="FingerPrint" />
                                        </div>

                                        @* sign in button *@
                                        <div class="form-group">
                                            <input class="btn btn-lg btn-primary btn-block" id="sbtn" type="submit" value="Login" />
                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                            @* div that is used to generate inputs and scrips from JavaScript code *@
                            <div id="container"></div>
                            @* Input that holds the encrypted JSON object that the serverside pulls in for processing *@
                            <input type="hidden" class="form-control" name="ioBlackBox" id="ioBlackBox" />
                        </form>
                    </section>
                </div>
                <div class="panel-footer">
                    <div class="row">
                        <div class="col-xs-12">
                            <a asp-area="" asp-controller="UsersModel" asp-action="Register">Register as a new user</a><br />
                            <a href="#" onclick="javascript:window.open('HelpInstructions.jsp');return false;">Sign in Help</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @* Script for VenderCall which is used to generate user data and send it to back end. See file for more details.
        "asp-encode" is a class that uses TagHelpers to help obfuscate the script code with Base64 encoding.
        Reference for whole project needs to be added to file "_ViewImports.cshtml" using just the namespace*@
    
    <script asp-encode="true">
        // Makes the call to the WebApi service and returns the JSON result
        // the JSON result is stored JavaScript code that is injected into the client
        // The code produces information based on the client device used to acess the webpage
        // That infomration is then processed into another JSON object, encrypted, and sent to the server side for processing

        // Variable Initialization
        var array = [];
        var bbInput = document.getElementById('ioBlackBox');
        var container = document.getElementById("container");
        
        // Used to clear existing inputs generated from the previous session
        while (container.hasChildNodes()) {
            container.removeChild(container.lastChild);
        }

        // Once the ajax request returns, it takes the gathered code and injects
        // it into this script tag which then populates the hidden fields to be
        // grabbed by the back end to be stored on the local db
        $(function () {
            $.ajax({
                type: 'POST',
                url: 'https://localhost:44376/api/object',
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {

                    for (key in data) {

                        // setting a variable to the for in loop return for simplification
                        var tmp = data[key]; 

                        // Creating inputs and scripts dynamically according to the return of the service
                        var script = document.createElement("script");
                        script.id = "vendor" + tmp.id;
                        container.appendChild(script);
                        var input = document.createElement("input");
                        input.type = "hidden";
                        input.name = "ven" + tmp.id;
                        input.id = "ven" + tmp.id;
                        container.appendChild(input);
                        container.appendChild(document.createElement("br"));

                        // JQuery version inject code pulled from service call
                        $("#vendor" + tmp.id).append(tmp.vendorCode);

                        // Funciton to set timer
                        doSetTimeout(tmp);
                    }

                    // Since some vendors need timers set to fetch device data, we have to delay the creation
                    // of the JSON object so that that input fields can populate
                    function doSetTimeout(tmp) {
                        setTimeout(function () {

                            // Creating JSON objects returned from vendor code generation using the values inside the generated inputs.
                            // in order to create a proper JSON object, the returns need to be surrounded with quotation marks.
                            // we also need to be aware that some returns will be already in objects.
                            // The if statements looks to see if the return begins with a braket. If so then there is no need to add quotes around a return.
                            if (!$("#ven" + tmp.id).val().match("^{")) {
                                array.push('{"Key":"' + tmp.vendorName + '","Data":"' + $("#ven" + tmp.id).val() + '"}');
                            }
                            else {
                                array.push('{"Key":"' + tmp.vendorName + '","Data":' + $("#ven" + tmp.id).val() + '}');
                            }
                        }, 1000);
                    }

                    // Waiting for input fields to populate
                    setTimeout(function () {

                        // Key and Initialization vector for encrypting the vendor returns
                        // CryptoJS reference is in "_Layout.cshtml"
                        var key = CryptoJS.enc.Utf8.parse(7061737323313233);
                        var iv = CryptoJS.enc.Utf8.parse(7061737323313233);

                        // Inserting individual vendor JSON objects into input and appending commas to each instance to separate objects
                        array.forEach(function (element) {
                            bbInput.value += element + ",";
                        });

                        // Creating JSON object to hold all vendor objects within the ioBlackBox input
                        // it puts the objects within an array as well as removes the last comma for formatting issues.
                        var encryptBB = '[' + bbInput.value;
                        encryptBB = '{"Vendors":' + encryptBB.slice(',', -1) + ']}';

                        // Encrypting the string withing the ioBlackbox input
                        var encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(encryptBB), key,
                            {
                                keySize: 128 / 8,
                                iv: iv,
                                mode: CryptoJS.mode.CBC,
                                padding: CryptoJS.pad.Pkcs7
                            });
                        // Inserting the encryption back into the ioBlackBox input
                        bbInput.value = encrypted;

                        // Removing Generated inputs used to capture individual vendor calls
                        while (container.hasChildNodes()) {
                            container.removeChild(container.lastChild);
                        }
                    }, 1000);
                },
                error: function (error) {
                    console.log(error);
                }
            });
        });

    </script>

    @* Using the client-js file, generates a device fingerprint
        from user's device info. The userFingerprint is added to
        the DeviceId hidden input field in the form *@
    <script asp-encode="true">
        var client = new ClientJS();
        var OS = client.getOS();
        var osVersion = client.getOSVersion();
        var browser = client.getBrowser();
        var engineVersion = client.getEngineVersion();
        var language = client.getLanguage();
        var isJava = client.isJava();
        var isSilverlight = client.isSilverlight();

        var userFingerprint = client.getCustomFingerprint(OS, osVersion, browser, engineVersion, language, isJava, isSilverlight);
        document.getElementById("FingerPrint").value = userFingerprint;
    </script>


}